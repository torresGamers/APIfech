{"version":3,"sources":["componentes.js/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","componentes.js/GifGridItem.js","componentes.js/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qLA+BeA,EA5BK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OAEI,sBAAMC,SATY,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAK,GAAC,OAAGH,GAAH,mBAAiBG,OAC9BF,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,SAjBQ,SAACN,GAClBF,EAAcE,EAAEO,OAAOF,a,+BCLjBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCF,EAFnC,+DAGAG,MAAMD,GAHN,cAGbE,EAHa,gBAICA,EAAKC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVT,IAAG,UAACO,EAAIG,cAAL,aAAC,EAAYC,iBAAiBX,QAVpB,kBAaZK,GAbY,4CAAH,sDCoBLO,EAnBM,SAACd,GAClB,MAA0Bb,mBAAS,CAC/BmB,KAAK,GACLS,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAXAC,qBAAU,WACNnB,EAAQC,GACPmB,MAAK,SAAAV,GACGQ,EAAS,CACVX,KAAKG,EACLM,SAAQ,SAGlB,CAACf,IAGIgB,GCPII,EAVK,SAAC,GAAmB,EAAlBV,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAC3B,OACI,sBAAKmB,UAAU,OAAf,UAEG,qBAAKC,IAAKpB,EAAKqB,IAAKZ,IACpB,4BAAIA,QCsBAa,EAxBC,SAAC,GAAgB,IAAfxB,EAAc,EAAdA,SAEd,EAA6Bc,EAAad,GAA9BY,EAAZ,EAAON,KAAYS,EAAnB,EAAmBA,QAGnB,OACI,qCACA,6BAAKf,IACJe,GAAW,2CACX,qBAAKM,UAAU,YAAf,SAEWT,EAAOJ,KAAI,SAACC,GACT,OAAO,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aCStCe,EAtBM,WAEjB,MAAgCtC,mBAAS,CAAC,cAA1C,mBAAOa,EAAP,KAAiBd,EAAjB,KAEA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBACA,6BAEQc,EAASQ,KAAI,SAAAR,GAAQ,OACjB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXlC0B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.4650baff.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes  from 'prop-types';\r\n\r\nconst AddCategory = ({setCategory}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleddInput=(e)=>{\r\n       setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleddSubmit =(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategory(e=>[inputValue,...e]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <form onSubmit={handleddSubmit}>\r\n            <input \r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleddInput} />\r\n        </form>    \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategory:PropTypes.func.isRequired\r\n}\r\nexport default AddCategory\r\n","\r\n\r\nexport const getGifs = async(category)=>{\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=X4mmmPZKG3MeQgt1UFNBgsMBi35fVfcH`;\r\n    const resp = await fetch(url);\r\n    const {data}= await resp.json();\r\n    // console.log(data)\r\n    const gifs = data.map(img=>{\r\n      return {\r\n          id:img.id,\r\n          title:img.title,\r\n          url:img.images?.downsized_medium.url\r\n      }\r\n    })\r\n    return gifs;        \r\n}","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nconst useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(img=>{\r\n                 setState({\r\n                data:img,\r\n                loading:false\r\n            })          \r\n        })\r\n    },[category])\r\n\r\n   \r\n    return state\r\n}\r\n\r\nexport default useFetchGifs\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className='card'>\r\n           \r\n           <img src={url} alt={title} />   \r\n           <p>{title}</p>         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data:images,loading}= useFetchGifs(category);\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading && <p>Loading...</p>}\r\n         <div className='card-grid'>           \r\n                {\r\n                    images.map((img)=>{\r\n                       return <GifGridItem  key={img.id} {...img}/>\r\n                        // return<li key={id}>{title}</li>\r\n                    //   return  <img key={id}src={url} alt={title}/>\r\n                    })\r\n                }\r\n            \r\n            \r\n        </div>\r\n        </>\r\n       \r\n    )\r\n}\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './componentes.js/AddCategory';\r\nimport GifGrid from './componentes.js/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    // const category =;\r\n    const [category, setCategory] = useState(['One Punch']);\r\n      \r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategory={setCategory}/>   \r\n        <hr/>\r\n        <ol>\r\n            {\r\n                category.map(category=>\r\n                    <GifGrid key={category} category={category}/>\r\n                    // return <li key={category}>{category}</li>\r\n                )\r\n            }\r\n        </ol>\r\n            \r\n        </>\r\n    )\r\n}          \r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp/>, document.getElementById('root'));\n"],"sourceRoot":""}